// Generated by CoffeeScript 1.10.0
(function() {
  document.addEventListener("DOMContentLoaded", function() {
    var arcs, avatar, clamp, el, extra_arc, fly, goggles, header_inner, header_lower, header_rect, i, land, lastX, lastY, len, ma, map, moving_average, plane, plane_data, plane_id, ref, ref1, reset, resize, right, rot, schedule_flight, scroll, update_scroll, update_wiggle, was_in_zone, x, y, ydiff;
    map = document.getElementById("mapcontainer");
    avatar = document.getElementById("avatar");
    header_inner = document.getElementById("header_inner");
    header_lower = document.getElementById("header_lower");
    header_rect = header_inner.getBoundingClientRect();
    was_in_zone = false;
    this.waiting_for_frame = false;
    this.waiting_for_goggle_frame = false;
    arcs = [[103, 26, 60, 19], [55, 17, 18, 23], [14, 25, 60, 14], [60, 14, 56, 24], [56, 24, 88, 37]];
    clamp = function(v) {
      return Math.max(Math.min(v, 1.0), 0.0);
    };
    moving_average = function(period) {
      this.nums = [];
      return (function(_this) {
        return function(num) {
          var n, vsum;
          _this.nums.push(num);
          if (_this.nums.length > period) {
            _this.nums.splice(0, 1);
          }
          vsum = _this.nums.reduce(function(t, s) {
            return t + s;
          });
          n = Math.min(period, _this.nums.length);
          return vsum / n;
        };
      })(this);
    };
    if (window.DeviceOrientationEvent != null) {
      ma = moving_average(10);
      this.inital_motion = "none";
      update_wiggle = (function(_this) {
        return function(event) {
          var acc, avg, percent;
          _this.waiting_for_google_frame = false;
          acc = event.accelerationIncludingGravity.z;
          if (_this.inital_motion === "none") {
            return _this.inital_motion = acc;
          } else {
            avg = ma(acc);
            percent = (_this.inital_motion - avg) / 3;
            if (percent < 0) {
              _this.inital_motion = avg;
            }
            if (percent > 1) {
              _this.inital_motion = avg + 3;
            }
            return goggles(clamp(percent));
          }
        };
      })(this);
      window.ondevicemotion = (function(_this) {
        return function(event) {
          if (!_this.waiting_for_google_frame) {
            requestAnimationFrame(function() {
              return update_wiggle(event);
            });
            return _this.waiting_for_google_frame = true;
          }
        };
      })(this);
    }
    goggles = function(percent) {
      var $left, $right;
      $left = document.getElementById("goggleLeft");
      $right = document.getElementById("goggleRight");
      $left.style.marginTop = (-27 * percent) + "px";
      $left.style.marginLeft = (4 * percent) + "px";
      $left.style.webkitTransform = "scaleY(" + (1 - 0.25 * percent) + ") rotate(" + (-20 * percent) + "deg)";
      $left.style.mozTransform = "scaleY(" + (1 - 0.25 * percent) + ") rotate(" + (-20 * percent) + "deg)";
      $left.style.oTransform = "scaleY(" + (1 - 0.25 * percent) + ") rotate(" + (-20 * percent) + "deg)";
      $left.style.transform = "scaleY(" + (1 - 0.25 * percent) + ") rotate(" + (-20 * percent) + "deg)";
      $right.style.marginTop = (-27 * percent) + "px";
      $right.style.marginLeft = (-4 * percent) + "px";
      $right.style.webkitTransform = "scaleY(" + (1 - 0.25 * percent) + ") rotate(" + (20 * percent) + "deg)";
      $right.style.mozTransform = "scaleY(" + (1 - 0.25 * percent) + ") rotate(" + (20 * percent) + "deg)";
      $right.style.oTransform = "scaleY(" + (1 - 0.25 * percent) + ") rotate(" + (20 * percent) + "deg)";
      return $right.style.transform = "scaleY(" + (1 - 0.25 * percent) + ") rotate(" + (20 * percent) + "deg)";
    };
    scroll = (function(_this) {
      return function() {
        var last_height, last_scroll, ref;
        ref = [window.scrollY, window.innerHeight], last_scroll = ref[0], last_height = ref[1];
        if (last_scroll < last_height && !_this.waiting_for_frame) {
          requestAnimationFrame(update_scroll);
          return _this.waiting_for_frame = true;
        }
      };
    })(this);
    update_scroll = (function(_this) {
      return function() {
        var header_height, padding, px;
        _this.waiting_for_frame = false;
        header_height = header_rect.bottom - header_rect.top;
        padding = (window.innerHeight - header_height) / 2;
        px = window.scrollY / window.innerHeight;
        if (px <= 1) {
          goggles(clamp(px * 2));
          header_inner.style.marginTop = ((1 + px * 2) * padding) + "px";
          return header_lower.style.opacity = 1 - px;
        }
      };
    })(this);
    resize = function() {
      var scale;
      scroll();
      if (window.innerWidth <= 767) {
        was_in_zone = true;
        scale = (window.innerWidth - 20) / 1080;
        map.style.webkitTransform = "scale(" + scale + ")";
        map.style.mozTransform = "scale(" + scale + ")";
        map.style.msTransform = "scale(" + scale + ")";
        map.style.transform = "scale(" + scale + ")";
        return map.style.marginBottom = "-" + (540 * (1 - scale)) + "px";
      } else if (was_in_zone) {
        was_in_zone = false;
        map.style.webkitTransform = "";
        map.style.mozTransform = "";
        map.style.msTransform = "";
        map.style.transform = "";
        return map.style.marginBottom = "";
      }
    };
    if (!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
      window.addEventListener("resize", resize);
      window.addEventListener("scroll", scroll);
    }
    resize();
    plane_data = {};
    schedule_flight = function() {
      var available, data, id, plane_id;
      available = (function() {
        var results;
        results = [];
        for (id in plane_data) {
          data = plane_data[id];
          if (!data['in_flight']) {
            results.push(id);
          }
        }
        return results;
      })();
      if (available.length === 0) {
        setTimeout(schedule_flight, 500);
        return;
      }
      plane_id = available[Math.floor(Math.random() * available.length)];
      return setTimeout((function() {
        return fly(plane_id);
      }), Math.random() * 1500 + 500);
    };
    fly = function(plane_id) {
      var data, new_rot, plane, plane_inner;
      plane = document.getElementById("plane" + plane_id);
      plane_data[plane_id]['in_flight'] = true;
      data = plane_data[plane_id];
      plane.style.left = data['right'] ? "-" + ydiff + "px" : "0px";
      plane.style.top = "0px";
      plane.style.webkitTransform = "rotate(" + (data['right'] ? "+" : "-") + "180deg)";
      plane_inner = plane.children[0];
      new_rot = data["right"] ? data["rot"] - 180 + 2 * data['extra_arc'] : data["rot"] + 180 - 2 * data['extra_arc'];
      plane_inner.style.webkitTransform = "rotate(" + new_rot + "deg)";
      this.plane = plane;
      setTimeout((function() {
        return document.getElementById("plane" + plane_id).classList.add("visible");
      }), 1000);
      setTimeout((function() {
        return land(plane_id);
      }), 2800);
      return schedule_flight();
    };
    land = function(plane_id) {
      var plane;
      plane = document.getElementById("plane" + plane_id);
      plane.classList.remove("visible");
      return setTimeout((function() {
        return reset(plane_id);
      }), 1000);
    };
    reset = function(plane_id) {
      var data, plane;
      plane = document.getElementById("plane" + plane_id);
      plane_data[plane_id]['in_flight'] = false;
      plane.classList.add("red");
      data = plane_data[plane_id];
      plane.style.left = plane_data[plane_id]["left"] + "px";
      plane.style.top = plane_data[plane_id]["top"] + "px";
      plane.style.webkitTransform = "rotate(0deg)";
      plane.children[0].style.webkitTransform = "rotate(" + plane_data[plane_id]["rot"] + "deg)";
      return setTimeout((function() {
        return plane.classList.remove("red");
      }), 50);
    };
    plane_id = 0;
    ref = document.getElementsByClassName("city");
    for (i = 0, len = ref.length; i < len; i++) {
      el = ref[i];
      x = el.getAttribute('data-x') * 9 - 5;
      el.style.left = x + "px";
      y = el.getAttribute('data-y') * 9 - 5;
      el.style.top = y + "px";
      el.innerHTML = "<div class='tooltip-wrap'><div class='tooltip'><div class='date'>" + el.getAttribute('data-date') + "</div><div class='name'>" + el.getAttribute('data-name') + "</div></div></div>";
      if ((typeof lastX !== "undefined" && lastX !== null) && el.className.indexOf("nofly") === -1) {
        right = lastX < x;
        ydiff = Math.abs(lastX - x) / 3;
        rot = -180 / Math.PI * (Math.atan2(lastX - x, lastY - y) + .5 * Math.PI);
        extra_arc = 35 - (y - lastY) / 3;
        rot = right ? rot - extra_arc : rot + extra_arc;
        plane_data[plane_id] = {
          right: right,
          ydiff: ydiff,
          rot: rot,
          extra_arc: extra_arc,
          left: right ? lastX - x : lastX - x - ydiff,
          top: lastY - y - ydiff,
          in_flight: false
        };
        plane = "<div class='plane-wrapper' id='plane" + plane_id + "' style='left: " + plane_data[plane_id]["left"] + "px; top: " + plane_data[plane_id]["top"] + "px;  width: " + ydiff + "px; height: " + ydiff + "px'><div class='" + (right ? "right" : "left") + "' style='-webkit-transform: rotate(" + rot + "deg)'></div></div>";
        el.setAttribute("plane_id", plane_id);
        el.innerHTML += plane;
        plane_id += 1;
      }
      ref1 = [x, y], lastX = ref1[0], lastY = ref1[1];
    }
    return schedule_flight();
  });

}).call(this);
